binned <- binning_seasonality(d18Oc,
D47,
ages,
0.1,
0.04,
1000,
"month",
"KimONeil97",
"Bernasconi18",
FALSE)
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
D47 <- Case1[, 30]
D47 <- D47[-which(is.na(D47))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
binned <- binning_seasonality(d18Oc,
D47,
ages,
0.1,
0.04,
100,
"month",
"KimONeil97",
"Bernasconi18",
FALSE)
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
D47 <- Case1[, 30]
D47 <- D47[-which(is.na(D47))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
monthly <- optimization_seasonality(d18Oc = d18Oc,
D47 = D47,
ages = ages,
SD_d18Oc = 0.1,
SD_D47 = 0.04,
N = 1000,
p = 0.05,
d18O_fun = "KimONeil97",
D47_fun = "Bernasconi18",
export = FALSE,
export_raw = FALSE)
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
D47 <- Case1[, 30]
D47 <- D47[-which(is.na(D47))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
monthly <- optimization_seasonality(d18Oc = d18Oc,
D47 = D47,
ages = ages,
SD_d18Oc = 0.1,
SD_D47 = 0.04,
N = 100,
p = 0.05,
d18O_fun = "KimONeil97",
D47_fun = "Bernasconi18",
export = FALSE,
export_raw = FALSE)
}
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
D47 <- Case1[, 30]
D47 <- D47[-which(is.na(D47))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
monthly <- optimization_seasonality(d18Oc = d18Oc,
D47 = D47,
ages = ages,
SD_d18Oc = 0.1,
SD_D47 = 0.04,
N = 100,
p = 0.05,
d18O_fun = "KimONeil97",
D47_fun = "Bernasconi18",
export = FALSE,
export_raw = FALSE)
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
ages <- Case1[, 27]
# Run function
monthly <- optimization_seasonality(d18Oc,
ages,
0.1,
"KimONeil97",
FALSE)
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
D47 <- Case1[, 30]
D47 <- D47[-which(is.na(D47))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
monthly <- smoothing_seasonality(d18Oc,
D47,
ages,
0.1,
0.04,
"optimize",
1000,
0.05,
"KimONeil97",
"Bernasconi18",
FALSE,
FALSE)
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
D47 <- Case1[, 30]
D47 <- D47[-which(is.na(D47))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
monthly <- smoothing_seasonality(d18Oc,
D47,
ages,
0.1,
0.04,
"optimize",
100,
0.05,
"KimONeil97",
"Bernasconi18",
FALSE,
FALSE)
?stop
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
D47 <- Case1[, 30]
D47 <- D47[-which(is.na(D47))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
ages <- c(ages, 1)
binning_seasonality <- function(d18Oc, # Subannually resolved d18Oc data
D47, # Subannually resolved D47 data
ages, # Vector containing ages for of all samples in years relative to the shell chronology
SD_d18Oc = 0.1, # Error (1 SD) on d18Oc data
SD_D47 = 0.04, # Error (1 SD) on D47 data
N = 1000, # Number of Monte Carlo simulations for binning
binsize = "month",
d18O_fun = "KimONeil97",
D47_fun = "Bernasconi18",
export = FALSE # Should the result be exported?
){
# Prepare data
# Check if data has equal length
if(length(unique(c(length(d18Oc), length(D47), length(ages)))) > 1){
stop("ERROR: Vectors 'd18Oc', 'D47' and 'ages' should have equal length")
}
if(length(SD_d18Oc) == 1){
SD_d18Oc <- rep(SD_d18Oc, length(d18Oc)) # Duplicate SD of d18Oc error through entire record length if only a single value is given (constant uncertainty)
}
if(length(SD_D47) == 1){
SD_D47 <- rep(SD_D47, length(D47)) # Duplicate SD of D47 error through entire record length if only a single value is given (constant uncertainty)
}
d18Omat <- as.data.frame(matrix(stats::rnorm(N * length(d18Oc), d18Oc, SD_d18Oc), ncol = N)) # Randomly resample d18O data using measurement uncertainty
colnames(d18Omat) <- paste("Sim", seq(1, N, 1), sep = "")
D47mat <- as.data.frame(matrix(stats::rnorm(N * length(D47), D47, SD_D47), ncol = N)) # Randomly resample D47 data using measurement uncertainty
colnames(D47mat) <- paste("Sim", seq(1, N, 1), sep = "")
# Use age model to bin D47, T and d18Osw
if(binsize == "month"){
resultmat <- data.frame(d18Oc = d18Oc, # Group d18Oc, D47 and age data
D47 = D47,
bin = ceiling((ages %% 1) * 12) # Use age data to group results into binned bins
)
bins = 1:12
}else if(binsize == "season"){
resultmat <- data.frame(d18Oc = d18Oc, # Group d18Oc, D47 and age data
D47 = D47,
bin = ceiling((ages %% 1) * 4) # Use age data to group results into binned bins
)
bins = 1:4
}
# Calculate binned statistics of all d18Oc values
cat("Grouping d18Oc data into binned bins: ", "\r")
d18Oc_binned <- data.frame(d18Oc_mean = vapply(bins, function(x) mean(as.matrix(d18Omat[which(resultmat$bin == x), ])), 1),
d18Oc_median = vapply(bins, function(x) stats::median(as.matrix(d18Omat[which(resultmat$bin == x), ])), 1),
d18Oc_SD = vapply(bins, function(x) stats::sd(as.matrix(d18Omat[which(resultmat$bin == x), ])), 1)
)
d18Oc_binned$d18Oc_SE <- d18Oc_binned$d18Oc_SD / sqrt(vapply(bins, function(x) length(resultmat$d18Oc[which(resultmat$bin == x)]), 1))
# Calculate binned statistics of all D47 values using the d18Oc measurements and the D47-d18Oc slopes of all successful simulations
cat("Grouping D47 data into binned bins: ", "\r")
D47_binned <- data.frame(D47_mean = vapply(bins, function(x) mean(as.matrix(D47mat[which(resultmat$bin == x), ])), 1),
D47_median = vapply(bins, function(x) stats::median(as.matrix(D47mat[which(resultmat$bin == x), ])), 1),
D47_SD = vapply(bins, function(x) stats::sd(as.matrix(D47mat[which(resultmat$bin == x), ])), 1)
)
D47_binned$D47_SE <- D47_binned$D47_SD / sqrt(vapply(bins, function(x) length(resultmat$D47[which(resultmat$bin == x)]), 1))
# Repeat for binned temperature reconstructions by calculating temperatures for each combination before averaging
cat("Grouping Temperature data into binned bins: ", "\r")
if(D47_fun == "Bernasconi18"){
T_binned <- data.frame(T_mean = vapply(bins, function(x) mean(sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 273.15), 1),
T_median = vapply(bins, function(x) stats::median(sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 273.15), 1),
T_SD = vapply(bins, function(x) stats::sd(sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 273.15), 1)
)
}else if(D47_fun == "Jautzy20"){
T_binned <- data.frame(T_mean = vapply(bins, function(x) mean(sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 273.15), 1),
T_median = vapply(bins, function(x) stats::median(sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 273.15), 1),
T_SD = vapply(bins, function(x) stats::sd(sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 273.15), 1)
)
}
T_binned$T_SE = T_binned$T_SD / sqrt(vapply(bins, function(x) length(resultmat$d18Oc[which(resultmat$bin == x)]), 1))
# Repeat also for the case where D47 is first binned and then converted to temperatures (not the correct solution)
if(D47_fun == "Bernasconi18"){
Trev_binned <- data.frame(T_mean = sqrt((0.0449 * 10 ^ 6) / (D47_binned$D47_mean - 0.167)) - 273.15,
T_median = sqrt((0.0449 * 10 ^ 6) / (D47_binned$D47_median - 0.167)) - 273.15,
T_SD = sqrt((0.0449 * 10 ^ 6) / (D47_binned$D47_mean - 0.167)) - 273.15 - (sqrt((0.0449 * 10 ^ 6) / (D47_binned$D47_mean + D47_binned$D47_SD - 0.167)) - 273.15)
)
}else if(D47_fun == "Jautzy20"){
Trev_binned <- data.frame(T_mean = sqrt((0.0433 * 10 ^ 6) / (D47_binned$D47_mean - 0.119 - 0.066)) - 273.15,
T_median = sqrt((0.0433 * 10 ^ 6) / (D47_binned$D47_median - 0.119 - 0.066)) - 273.15,
T_SD = sqrt((0.0433 * 10 ^ 6) / (D47_binned$D47_mean - 0.119 - 0.066)) - 273.15 - (sqrt((0.0433 * 10 ^ 6) / (D47_binned$D47_mean + D47_binned$D47_SD - 0.119 - 0.066)) - 273.15)
)
}
Trev_binned$T_SE = Trev_binned$T_SD / sqrt(vapply(bins, function(x) length(resultmat$d18Oc[which(resultmat$bin == x)]), 1))
# Repeat for binned d18Ow reconstructions by calculating temperatures for each combination before averaging
cat("Grouping d18Ow data into binned bins: ", "\r")
if(d18O_fun == "KimONeil97"){
if(D47_fun == "Bernasconi18"){
d18Ow_binned <- data.frame(d18Ow_mean = vapply(bins, function(x) mean(((as.matrix(d18Omat[which(resultmat$bin == x), ]) / 1000 + 1) / exp(((18.03 * 10 ^ 3) / sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 32.42) / 1000) - 1) * 1000 * 1.03092 + 30.92), 1),
d18Ow_median = vapply(bins, function(x) stats::median(((as.matrix(d18Omat[which(resultmat$bin == x), ]) / 1000 + 1) / exp(((18.03 * 10 ^ 3) / sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 32.42) / 1000) - 1) * 1000 * 1.03092 + 30.92), 1),
d18Ow_SD = vapply(bins, function(x) stats::sd(((as.matrix(d18Omat[which(resultmat$bin == x), ]) / 1000 + 1) / exp(((18.03 * 10 ^ 3) / sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 32.42) / 1000) - 1) * 1000 * 1.03092 + 30.92), 1)
)
}else if(D47_fun == "Jautzy20"){
d18Ow_binned <- data.frame(d18Ow_mean = vapply(bins, function(x) mean(((as.matrix(d18Omat[which(resultmat$bin == x), ]) / 1000 + 1) / exp(((18.03 * 10 ^ 3) / sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 32.42) / 1000) - 1) * 1000 * 1.03092 + 30.92), 1),
d18Ow_median = vapply(bins, function(x) stats::median(((as.matrix(d18Omat[which(resultmat$bin == x), ]) / 1000 + 1) / exp(((18.03 * 10 ^ 3) / sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 32.42) / 1000) - 1) * 1000 * 1.03092 + 30.92), 1),
d18Ow_SD = vapply(bins, function(x) stats::sd(((as.matrix(d18Omat[which(resultmat$bin == x), ]) / 1000 + 1) / exp(((18.03 * 10 ^ 3) / sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 32.42) / 1000) - 1) * 1000 * 1.03092 + 30.92), 1)
)
}
}else if(d18O_fun == "GrossmanKu86"){
if(D47_fun == "Bernasconi18"){
d18Ow_binned <- data.frame(d18Ow_mean = vapply(bins, function(x) mean(as.matrix(d18Omat[which(resultmat$bin == x), ]) + ((sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 273.15) - 20.6) / 4.34 - 0.2), 1),
d18Ow_median = vapply(bins, function(x) stats::median(as.matrix(d18Omat[which(resultmat$bin == x), ]) + ((sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 273.15) - 20.6) / 4.34 - 0.2), 1),
d18Ow_SD = vapply(bins, function(x) stats::sd(as.matrix(d18Omat[which(resultmat$bin == x), ]) + ((sqrt((0.0449 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.167)) - 273.15) - 20.6) / 4.34 - 0.2), 1)
)
}else if(D47_fun == "Jautzy20"){
d18Ow_binned <- data.frame(d18Ow_mean = vapply(bins, function(x) mean(as.matrix(d18Omat[which(resultmat$bin == x), ]) + ((sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 273.15) - 20.6) / 4.34 - 0.2), 1),
d18Ow_median = vapply(bins, function(x) stats::median(as.matrix(d18Omat[which(resultmat$bin == x), ]) + ((sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 273.15) - 20.6) / 4.34 - 0.2), 1),
d18Ow_SD = vapply(bins, function(x) stats::sd(as.matrix(d18Omat[which(resultmat$bin == x), ]) + ((sqrt((0.0433 * 10 ^ 6) / (as.matrix(D47mat[which(resultmat$bin == x), ]) - 0.119 - 0.066)) - 273.15) - 20.6) / 4.34 - 0.2), 1)
)
}
}
d18Ow_binned$d18Ow_SE = d18Ow_binned$d18Ow_SD / sqrt(vapply(bins, function(x) length(resultmat$d18Oc[which(resultmat$bin == x)]), 1))
bin_stats <- cbind(bins,
d18Oc_binned,
D47_binned,
T_binned,
Trev_binned,
d18Ow_binned)
colnames(bin_stats)[1] <- "bin #"
# Export results of binned data (OPTIONAL)
if(export == TRUE){
utils::write.csv(bin_stats, paste("binned_results.csv"))
}
return(bin_stats)
}
binned <- binning_seasonality(d18Oc,
D47,
ages,
0.1,
0.04,
100, # Use small amount of samples for quick testing (recommended N = 1000)
"month",
"KimONeil97",
"Bernasconi18",
FALSE)
devtools::document()
devtools::install()
devtools::install()
install.packages(c("backports", "broom", "cowplot", "data.table", "diffobj", "DT", "future", "ggplot2", "ggrepel", "hexbin", "htmlwidgets", "jsonlite", "parallelly", "patchwork", "pbkrtest", "pkgbuild", "plotly", "psych", "RcppEigen", "rlang", "rmarkdown", "testthat", "tinytex", "usethis", "xfun"))
install.packages(c("backports", "broom", "cowplot", "data.table", "diffobj", "DT", "future", "ggplot2", "ggrepel", "hexbin", "htmlwidgets", "jsonlite", "parallelly", "patchwork", "pbkrtest", "pkgbuild", "plotly", "psych", "RcppEigen", "rlang", "rmarkdown", "testthat", "tinytex", "usethis", "xfun"))
install.packages(c("backports", "broom", "cowplot", "data.table", "diffobj", "DT", "future", "ggplot2", "ggrepel", "hexbin", "htmlwidgets", "jsonlite", "parallelly", "patchwork", "pbkrtest", "pkgbuild", "plotly", "psych", "RcppEigen", "rlang", "rmarkdown", "testthat", "tinytex", "usethis", "xfun"))
install.packages(c("backports", "broom", "cowplot", "data.table", "diffobj", "DT", "future", "ggplot2", "ggrepel", "hexbin", "htmlwidgets", "jsonlite", "parallelly", "patchwork", "pbkrtest", "pkgbuild", "plotly", "psych", "RcppEigen", "rlang", "rmarkdown", "testthat", "tinytex", "usethis", "xfun"))
devtools::install()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
require(seasonalclumped)
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
ages <- Case1[, 27]
# Run function
monthly <- oxygen_isotope_seasonality(d18Oc,
ages,
0.1,
"KimONeil97",
FALSE)
ages
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
monthly <- oxygen_isotope_seasonality(d18Oc,
ages,
0.1,
"KimONeil97",
FALSE)
# Prepare data
# Check if data has equal length
if(length(d18Oc) != length(ages)){
stop("ERROR: Vectors 'd18Oc' and 'ages' should have equal length")
}
if(length(SD_d18Oc) == 1){
SD_d18Oc <- rep(SD_d18Oc, length(d18Oc)) # Duplicate SD of d18Oc error through entire record length if only a single value is given (constant uncertainty)
}
if(length(d18Ow) == 1){
d18Ow <- rep(d18Ow, length(d18Oc)) # Duplicate d18Ow value through entire record length if only a single value is given (constant d18O of precipitation fluid)
}
# Group data into monthly bins
resultmat <- data.frame(d18Oc = d18Oc, # Group d18Oc and age data
month = ceiling((ages %% 1) * 12) # Use age data to group results into monthly bins
)
SD_d18Oc = 0.1, # Error (1 SD) on d18Oc data
d18Ow = 0, # Vector containing d18O values of the precipitation fluid.
d18O_fun = "KimONeil97",
export = FALSE # Should the result be exported?
SD_d18Oc = 0.1; # Error (1 SD) on d18Oc data
d18Ow = 0; # Vector containing d18O values of the precipitation fluid.
d18O_fun = "KimONeil97";
export = FALSE # Should the result be exported?
# Prepare data
# Check if data has equal length
if(length(d18Oc) != length(ages)){
stop("ERROR: Vectors 'd18Oc' and 'ages' should have equal length")
}
if(length(SD_d18Oc) == 1){
SD_d18Oc <- rep(SD_d18Oc, length(d18Oc)) # Duplicate SD of d18Oc error through entire record length if only a single value is given (constant uncertainty)
}
if(length(d18Ow) == 1){
d18Ow <- rep(d18Ow, length(d18Oc)) # Duplicate d18Ow value through entire record length if only a single value is given (constant d18O of precipitation fluid)
}
# Group data into monthly bins
resultmat <- data.frame(d18Oc = d18Oc, # Group d18Oc and age data
month = ceiling((ages %% 1) * 12) # Use age data to group results into monthly bins
)
# Calculate monthly statistics of all d18Oc values
cat("Grouping d18Oc data into monthly bins: ", "\r")
d18Oc_monthly <- data.frame(d18Oc_mean = vapply(1:12, function(x) mean(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_median = vapply(1:12, function(x) stats::median(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_SD = vapply(1:12, function(x) stats::sd(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_SDint = sqrt(vapply(1:12, function(x) sum(SD_d18Oc[which(resultmat$month == x)] ^ 2) / length(SD_d18Oc[which(resultmat$month == x)]), 1))
)
d18Oc_monthly$d18Oc_SDtot = sqrt(d18Oc_monthly$d18Oc_SDint ^ 2 + d18Oc_monthly$d18Oc_SD ^ 2)
d18Oc_monthly$d18Oc_SE <- d18Oc_monthly$d18Oc_SDtot / sqrt(vapply(1:12, function(x) length(resultmat$d18Oc[which(resultmat$month == x)]), 1))
# Calculate monthly statistics of all d18Oc values
cat("Grouping d18Oc data into monthly bins: ", "\r")
d18Oc_monthly <- data.frame(d18Oc_mean = vapply(1:12, function(x) mean(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_median = vapply(1:12, function(x) stats::median(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_SD = vapply(1:12, function(x) stats::sd(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_SDint = sqrt(vapply(1:12, function(x) sum(SD_d18Oc[which(resultmat$month == x)] ^ 2) / length(SD_d18Oc[which(resultmat$month == x)]), 1))
)
d18Oc_monthly$d18Oc_SDtot = sqrt(d18Oc_monthly$d18Oc_SDint ^ 2 + d18Oc_monthly$d18Oc_SD ^ 2)
d18Oc_monthly$d18Oc_SE <- d18Oc_monthly$d18Oc_SDtot / sqrt(vapply(1:12, function(x) length(resultmat$d18Oc[which(resultmat$month == x)]), 1))
# Calculate monthly statistics of all d18Ow values
cat("Grouping d18Ow data into monthly bins: ", "\r")
d18Ow_monthly <- data.frame(d18Ow_mean = vapply(1:12, function(x) mean(d18Ow[which(resultmat$month == x)]), 1),
d18Ow_median = vapply(1:12, function(x) stats::median(d18Ow[which(resultmat$month == x)]), 1),
d18Ow_SD = vapply(1:12, function(x) stats::sd(d18Ow[which(resultmat$month == x)]), 1)
)
d18Ow_monthly$d18Oc_SE <- d18Ow_monthly$d18Ow_SD / sqrt(vapply(1:12, function(x) length(d18Ow[which(resultmat$month == x)]), 1))
oxygen_isotope_seasonality <- function(d18Oc, # Sub–annually resolved d18Oc data
oxygen_isotope_seasonality <- function(d18Oc, # Sub–annually resolved d18Oc data
ages, # Vector containing ages for of all samples in years relative to the shell chronology
SD_d18Oc = 0.1, # Error (1 SD) on d18Oc data
d18Ow = 0, # Vector containing d18O values of the precipitation fluid.
d18O_fun = "KimONeil97",
export = FALSE # Should the result be exported?
){
# Prepare data
# Check if data has equal length
if(length(d18Oc) != length(ages)){
stop("ERROR: Vectors 'd18Oc' and 'ages' should have equal length")
}
if(length(SD_d18Oc) == 1){
SD_d18Oc <- rep(SD_d18Oc, length(d18Oc)) # Duplicate SD of d18Oc error through entire record length if only a single value is given (constant uncertainty)
}
if(length(d18Ow) == 1){
d18Ow <- rep(d18Ow, length(d18Oc)) # Duplicate d18Ow value through entire record length if only a single value is given (constant d18O of precipitation fluid)
}
# Group data into monthly bins
resultmat <- data.frame(d18Oc = d18Oc, # Group d18Oc and age data
month = ceiling((ages %% 1) * 12) # Use age data to group results into monthly bins
)
# Calculate monthly statistics of all d18Oc values
cat("Grouping d18Oc data into monthly bins: ", "\r")
d18Oc_monthly <- data.frame(d18Oc_mean = vapply(1:12, function(x) mean(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_median = vapply(1:12, function(x) stats::median(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_SD = vapply(1:12, function(x) stats::sd(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_SDint = sqrt(vapply(1:12, function(x) sum(SD_d18Oc[which(resultmat$month == x)] ^ 2) / length(SD_d18Oc[which(resultmat$month == x)]), 1))
)
d18Oc_monthly$d18Oc_SDtot = sqrt(d18Oc_monthly$d18Oc_SDint ^ 2 + d18Oc_monthly$d18Oc_SD ^ 2)
d18Oc_monthly$d18Oc_SE <- d18Oc_monthly$d18Oc_SDtot / sqrt(vapply(1:12, function(x) length(resultmat$d18Oc[which(resultmat$month == x)]), 1))
# Calculate monthly statistics of all d18Ow values
cat("Grouping d18Ow data into monthly bins: ", "\r")
d18Ow_monthly <- data.frame(d18Ow_mean = vapply(1:12, function(x) mean(d18Ow[which(resultmat$month == x)]), 1),
d18Ow_median = vapply(1:12, function(x) stats::median(d18Ow[which(resultmat$month == x)]), 1),
d18Ow_SD = vapply(1:12, function(x) stats::sd(d18Ow[which(resultmat$month == x)]), 1)
)
d18Ow_monthly$d18Oc_SE <- d18Ow_monthly$d18Ow_SD / sqrt(vapply(1:12, function(x) length(d18Ow[which(resultmat$month == x)]), 1))
# Calculate monthly statistics of all temperature reconstructions
cat("Grouping temperature data into monthly bins: ", "\r")
if(d18O_fun == "KimONeil97"){ # Use transfer function by Kim and O'Neil (1997)
T_monthly <- data.frame(T_mean = vapply(1:12, function(x) mean(18.03 * 10 ^ 3 / (log((resultmat$d18Oc[which(resultmat$month == x)] - (0.97002 * d18Ow[which(resultmat$month == x)] - 29.98)) / 1000 + 1) * 1000 + 32.42) - 273.15), 1),
T_median = vapply(1:12, function(x) stats::median(18.03 * 10 ^ 3 / (log((resultmat$d18Oc[which(resultmat$month == x)] - (0.97002 * d18Ow[which(resultmat$month == x)] - 29.98)) / 1000 + 1) * 1000 + 32.42) - 273.15), 1),
T_SD = vapply(1:12, function(x) stats::sd(18.03 * 10 ^ 3 / (log((resultmat$d18Oc[which(resultmat$month == x)] - (0.97002 * d18Ow[which(resultmat$month == x)] - 29.98)) / 1000 + 1) * 1000 + 32.42) - 273.15), 1)
)
}else if(d18O_fun == "GrossmanKu86"){ # Use transfer function by Grossman and Ku (1986) adapted by Dettman et al., (1999)
T_monthly <- data.frame(T_mean = vapply(1:12, function(x) mean(20.6 - 4.34 * (resultmat$d18Oc[which(resultmat$month == x)] - d18Ow[which(resultmat$month == x)] - 0.2)), 1),
T_median = vapply(1:12, function(x) stats::median(20.6 - 4.34 * (resultmat$d18Oc[which(resultmat$month == x)] - d18Ow[which(resultmat$month == x)] - 0.2)), 1),
T_SD = vapply(1:12, function(x) stats::sd(20.6 - 4.34 * (resultmat$d18Oc[which(resultmat$month == x)] - d18Ow[which(resultmat$month == x)] - 0.2)), 1)
)
}
T_monthly$T_SE = T_monthly$T_SD / sqrt(vapply(1:12, function(x) length(resultmat$d18Oc[which(resultmat$month == x)]), 1))
monthly<-cbind(d18Oc_monthly,
d18Ow_monthly,
T_monthly)
# Export results of monthly grouped data
if(export == TRUE){
utils::write.csv(monthly, paste("Monthly_results.csv"))
}
return(monthly)
}
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
monthly <- oxygen_isotope_seasonality(d18Oc,
ages,
0.1,
"KimONeil97",
FALSE)
warnings()
rm(list=ls())
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
monthly <- oxygen_isotope_seasonality(d18Oc,
ages,
0.1,
"KimONeil97",
FALSE)
SD_d18Oc = 0.1; # Error (1 SD) on d18Oc data
d18Ow = 0; # Vector containing d18O values of the precipitation fluid.
d18O_fun = "KimONeil97";
export = FALSE # Should the result be exported?
# Prepare data
# Check if data has equal length
if(length(d18Oc) != length(ages)){
stop("ERROR: Vectors 'd18Oc' and 'ages' should have equal length")
}
if(length(SD_d18Oc) == 1){
SD_d18Oc <- rep(SD_d18Oc, length(d18Oc)) # Duplicate SD of d18Oc error through entire record length if only a single value is given (constant uncertainty)
}
if(length(d18Ow) == 1){
d18Ow <- rep(d18Ow, length(d18Oc)) # Duplicate d18Ow value through entire record length if only a single value is given (constant d18O of precipitation fluid)
}
# Group data into monthly bins
resultmat <- data.frame(d18Oc = d18Oc, # Group d18Oc and age data
month = ceiling((ages %% 1) * 12) # Use age data to group results into monthly bins
)
# Calculate monthly statistics of all d18Oc values
cat("Grouping d18Oc data into monthly bins: ", "\r")
d18Oc_monthly <- data.frame(d18Oc_mean = vapply(1:12, function(x) mean(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_median = vapply(1:12, function(x) stats::median(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_SD = vapply(1:12, function(x) stats::sd(resultmat$d18Oc[which(resultmat$month == x)]), 1),
d18Oc_SDint = sqrt(vapply(1:12, function(x) sum(SD_d18Oc[which(resultmat$month == x)] ^ 2) / length(SD_d18Oc[which(resultmat$month == x)]), 1))
)
d18Oc_monthly$d18Oc_SDtot = sqrt(d18Oc_monthly$d18Oc_SDint ^ 2 + d18Oc_monthly$d18Oc_SD ^ 2)
d18Oc_monthly$d18Oc_SE <- d18Oc_monthly$d18Oc_SDtot / sqrt(vapply(1:12, function(x) length(resultmat$d18Oc[which(resultmat$month == x)]), 1))
View(d18Oc_monthly)
# Calculate monthly statistics of all d18Ow values
cat("Grouping d18Ow data into monthly bins: ", "\r")
d18Ow_monthly <- data.frame(d18Ow_mean = vapply(1:12, function(x) mean(d18Ow[which(resultmat$month == x)]), 1),
d18Ow_median = vapply(1:12, function(x) stats::median(d18Ow[which(resultmat$month == x)]), 1),
d18Ow_SD = vapply(1:12, function(x) stats::sd(d18Ow[which(resultmat$month == x)]), 1)
)
d18Ow_monthly$d18Oc_SE <- d18Ow_monthly$d18Ow_SD / sqrt(vapply(1:12, function(x) length(d18Ow[which(resultmat$month == x)]), 1))
View(d18Ow_monthly)
rm(list=ls())
Case1 <- seasonalclumped::Case1
d18Oc <- Case1[, 29]
d18Oc <- d18Oc[-which(is.na(d18Oc))]
ages <- Case1[, 27]
ages <- ages[-which(is.na(ages))]
# Run function
monthly <- oxygen_isotope_seasonality(d18Oc,
ages,
0.1,
0,
"KimONeil97",
FALSE)
rm(list=ls())
devtools::document()
devtools::install()
devtools::install()
